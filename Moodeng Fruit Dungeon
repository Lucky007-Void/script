local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("LuckyXHub Moodeng Fruit", "DarkTheme")
local Tab = Window:NewTab("Main")
local Section = Tab:NewSection("Main")

-- Configurations
local systems = {
    Mon = {
        dropdown = nil,
        selectedMonster = nil,
        uniqueMonsters = {},
        isAutoTeleportActive = false,
        monFolders = {
            workspace.Wave_Folders:FindFirstChild("Npcs")
        }
    }
}

-- Function to update monster list for each system
local function updateMonsterList(system)
    local config = systems[system]
    if not config then
        warn("System not found: " .. system)
        return
    end

    local seenMonsters = {}
    config.uniqueMonsters = {}

    if system == "Mon" then
        -- Check multiple folders for "Mon" system
        for _, folder in pairs(config.monFolders) do
            if folder then
                for _, monster in pairs(folder:GetChildren()) do
                    if monster:IsA("Model") and monster:FindFirstChild("NPC") and not seenMonsters[monster.Name] then
                        table.insert(config.uniqueMonsters, monster.Name)
                        seenMonsters[monster.Name] = true
                    end
                end
            end
        end
    elseif system == "Boss" then
        -- Check the single folder for "Boss" system
        local enemiesFolder = config.enemiesFolderPath
        if enemiesFolder then
            for _, monster in pairs(enemiesFolder:GetChildren()) do
                if monster:IsA("Model") and monster:FindFirstChild("NPC") and not seenMonsters[monster.Name] then
                    table.insert(config.uniqueMonsters, monster.Name)
                    seenMonsters[monster.Name] = true
                end
            end
        end
    end

    if config.dropdown then
        config.dropdown:Refresh(config.uniqueMonsters)
    end
end

local TweenService = game:GetService("TweenService")

local function teleportToMonster(system)
    local config = systems[system]
    if not config or not config.selectedMonster then
        warn("Invalid system or no selected monster.")
        return
    end

    local monstersFolder = system == "Mon" and config.monFolders or {config.enemiesFolderPath}
    for _, folder in pairs(monstersFolder) do
        if folder then
            for _, monster in pairs(folder:GetChildren()) do
                if monster:IsA("Model") and monster.Name == config.selectedMonster and monster:FindFirstChild("HumanoidRootPart") then
                    local humanoid = monster:FindFirstChild("Humanoid")
                    if humanoid and humanoid.Health > 0 then
                        local player = game.Players.LocalPlayer
                        local character = player.Character
                        if character and character:FindFirstChild("HumanoidRootPart") then
                            local humanoidRootPart = character.HumanoidRootPart
							local humanoid = character.Humanoid
                            local monsterRootPart = monster:FindFirstChild("HumanoidRootPart")

                            -- คำนวณตำแหน่งด้านหลังมอนสเตอร์
                            local behindPosition = monsterRootPart.CFrame * CFrame.new(0, 10, 0) -- อยู่ด้านบนมอนสเตอร์ 15 หน่วย
                            
                            -- ย้าย HumanoidRootPart ไปยังตำแหน่งใหม่ และหันหน้าไปหามอนสเตอร์
                            humanoidRootPart.CFrame = CFrame.lookAt(behindPosition.Position, monsterRootPart.Position)

                            print("Teleported to and facing:", config.selectedMonster)
                            return
                        else
                            warn("Character or HumanoidRootPart not found.")
                        end
                    else
                        print("Monster is dead, looking for another monster...")
                    end
                end
            end
        else
            warn("Folder not found in monstersFolder.")
        end
    end
    print("Monster not found:", config.selectedMonster)
end

local TweenService = game:GetService("TweenService")

local function teleportMonstersToSelectedMonster(system)
    local config = systems[system]
    if not config or not config.selectedMonster then
        return
    end

    local monstersFolder = system == "Mon" and config.monFolders or {config.enemiesFolderPath}

    -- Hitbox configuration
    local hitboxConfig = {
        size = Vector3.new(10, 30, 10),
        transparency = 0.9,
        color = BrickColor.new("Really black"),
        material = Enum.Material.Neon,
        canCollide = false
    }

    -- Iterate through folders to find and teleport matching monsters
    for _, folder in pairs(monstersFolder) do
        if folder and folder:IsA("Folder") then
            local targetMonster = nil

            -- Find the target monster by name
            for _, monster in pairs(folder:GetChildren()) do
                if monster:IsA("Model") and monster.Name == config.selectedMonster and monster:FindFirstChild("HumanoidRootPart") then
                    targetMonster = monster
                    break
                end
            end

            if targetMonster then
                local targetPosition = targetMonster.HumanoidRootPart.Position

                -- Teleport only matching monsters in the folder
                for _, monster in pairs(folder:GetChildren()) do
                    if monster:IsA("Model") and monster.Name == config.selectedMonster and monster:FindFirstChild("HumanoidRootPart") then
                        local humanoid = monster:FindFirstChildOfClass("Humanoid")
                        if humanoid then
                            -- Disable monster movement
                            humanoid.WalkSpeed = 0
                            humanoid.JumpPower = 0

                            -- Tween to target position
                            local otherHumanoidRootPart = monster.HumanoidRootPart
                            local tweenInfo = TweenInfo.new(0, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                            local tweenGoal = {CFrame = CFrame.new(targetPosition)}
                            local tween = TweenService:Create(otherHumanoidRootPart, tweenInfo, tweenGoal)
                            tween:Play()

                            -- Configure hitbox properties
                            otherHumanoidRootPart.Size = hitboxConfig.size
                            otherHumanoidRootPart.Transparency = hitboxConfig.transparency
                            otherHumanoidRootPart.CanCollide = hitboxConfig.canCollide
                            otherHumanoidRootPart.Anchored = true
                            otherHumanoidRootPart.BrickColor = hitboxConfig.color
                            otherHumanoidRootPart.Material = hitboxConfig.material
                        end
                    end
                end
                print("Teleported all monsters with the same name to:", config.selectedMonster)
            else
                print("Target monster not found in folder:", folder.Name, "Monster Name:", config.selectedMonster)
            end
        end
    end
end

-- Function to auto-click (without using the mouse directly)
local VirtualUser = game:GetService("VirtualUser")
local function autoClick()
    while _G.autoClickEnabled do
        VirtualUser:CaptureController()
        VirtualUser:ClickButton1(Vector2.new(0, 0)) -- จำลองการคลิกซ้ายที่ตำแหน่งหน้าจอ
        task.wait(0.1) -- ปรับดีเลย์ระหว่างคลิก (ค่าแนะนำ: 0.1 วินาที)
    end
end

-- Setup Dropdowns and Toggles for both Boss and Mon systems in the same section
for system, config in pairs(systems) do
    -- Dropdown for selecting monster
    config.dropdown = Section:NewDropdown("Select Monster (" .. system .. ")", "Choose a monster to teleport to for " .. system, config.uniqueMonsters, function(selected)
        config.selectedMonster = selected
        print("Selected Monster (" .. system .. "):", selected)
    end)

    -- Toggle for auto teleporting
    Section:NewToggle("Auto Teleport (" .. system .. ")", "Enable/Disable auto teleport for System " .. system, function(state)
        config.isAutoTeleportActive = state
        if state then
            print("Auto teleport (" .. system .. ") activated")
            while config.isAutoTeleportActive do
			    local player = game.Players.LocalPlayer
                local character = player.Character
			    local humanoidRootPart = character.HumanoidRootPart
                teleportToMonster(system)
				teleportMonstersToSelectedMonster(system)
                task.wait() -- Adjusted to 1 second to avoid high CPU load
            end
        else
            print("Auto teleport (" .. system .. ") deactivated")
        end
    end)
end

-- Toggle for Auto Click
Section:NewToggle("Auto Click", "Enable/Disable auto-click at the center of the screen", function(state)
    _G.autoClickEnabled = state
    if state then
        print("Auto-click activated")
        task.spawn(autoClick) -- เริ่ม Auto Click ใน Task แยก
    else
        print("Auto-click deactivated")
    end
end)

-- Refresh the monster lists every second for both Boss and Mon systems
task.spawn(function()
    while true do
        updateMonsterList("Boss")
        updateMonsterList("Mon")
        task.wait(1) -- Adjusted to 1 second to avoid high CPU load
    end
end)

local Section = Tab:NewSection("Teleport")

local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")

-- PlaceID ของเกมที่ต้องการ
local placeId = 76091669089883 -- เปลี่ยนเป็น PlaceID ของคุณ
local function getSmallestServer()
    local servers = {}
    local url = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
    local success, result = pcall(function()
        return HttpService:JSONDecode(game:HttpGet(url))
    end)
    
    if success and result and result.data then
        for _, server in pairs(result.data) do
            -- หาเซิร์ฟเวอร์ที่ไม่มีผู้เล่นเลย
            if server.playing == 0 and server.id ~= game.JobId then
                return server.id
            end
        end
    end
    
    return nil -- ถ้าไม่มีเซิร์ฟเวอร์ที่เหมาะสม
end

local Button = Section:NewButton("Teleport to Dungeon", "Find and join an empty server", function()
    local serverId = getSmallestServer()
    if serverId then
        TeleportService:TeleportToPlaceInstance(placeId, serverId)
    else
        print("No suitable server found. Creating a new one.")
        TeleportService:Teleport(placeId) -- สร้างเซิร์ฟเวอร์ใหม่
    end
end)

local Section = Tab:NewSection("Auto Press")

local VirtualInputManager = game:GetService("VirtualInputManager") -- บริการสำหรับจัดการ Input

local autoPressZEnabled = false -- สถานะเปิด/ปิด Auto Press Z

-- ฟังก์ชันกดปุ่ม Z อัตโนมัติ
local function autoPressZ()
    while autoPressZEnabled do
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Z, false, game) -- กดปุ่ม Z
        task.wait(0.1) -- เวลาค้างปุ่ม (ปรับค่าได้)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Z, false, game) -- ปล่อยปุ่ม Z
        task.wait(0.5) -- เวลาระหว่างการกด (ปรับค่าได้)
    end
end

local VirtualInputManager = game:GetService("VirtualInputManager") -- บริการสำหรับจัดการ Input

local autoPressXEnabled = false -- สถานะเปิด/ปิด Auto Press X

-- ฟังก์ชันกดปุ่ม X อัตโนมัติ
local function autoPressX()
    while autoPressXEnabled do
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.X, false, game) -- กดปุ่ม X
        task.wait(0.1) -- เวลาค้างปุ่ม (ปรับค่าได้)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.X, false, game) -- ปล่อยปุ่ม X
        task.wait(0.5) -- เวลาระหว่างการกด (ปรับค่าได้)
    end
end

local VirtualInputManager = game:GetService("VirtualInputManager") -- บริการสำหรับจัดการ Input

local autoPressCEnabled = false -- สถานะเปิด/ปิด Auto Press C

-- ฟังก์ชันกดปุ่ม C อัตโนมัติ
local function autoPressC()
    while autoPressCEnabled do
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.C, false, game) -- กดปุ่ม C
        task.wait(0.1) -- เวลาค้างปุ่ม (ปรับค่าได้)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.C, false, game) -- ปล่อยปุ่ม C
        task.wait(0.5) -- เวลาระหว่างการกด (ปรับค่าได้)
    end
end

local VirtualInputManager = game:GetService("VirtualInputManager") -- บริการสำหรับจัดการ Input

local autoPressVEnabled = false -- สถานะเปิด/ปิด Auto Press V

-- ฟังก์ชันกดปุ่ม V อัตโนมัติ
local function autoPressV()
    while autoPressVEnabled do
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.V, false, game) -- กดปุ่ม V
        task.wait(0.1) -- เวลาค้างปุ่ม (ปรับค่าได้)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.V, false, game) -- ปล่อยปุ่ม V
        task.wait(0.5) -- เวลาระหว่างการกด (ปรับค่าได้)
    end
end

local VirtualInputManager = game:GetService("VirtualInputManager") -- บริการสำหรับจัดการ Input

local autoPressBEnabled = false -- สถานะเปิด/ปิด Auto Press B

-- ฟังก์ชันกดปุ่ม B อัตโนมัติ
local function autoPressB()
    while autoPressBEnabled do
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.B, false, game) -- กดปุ่ม B
        task.wait(0.1) -- เวลาค้างปุ่ม (ปรับค่าได้)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.B, false, game) -- ปล่อยปุ่ม B
        task.wait(0.5) -- เวลาระหว่างการกด (ปรับค่าได้)
    end
end

Section:NewToggle("Auto Z", "Enable/Disable auto pressing Z", function(state)
    autoPressZEnabled = state
    if state then
        print("Auto Z Activated")
        task.spawn(autoPressZ)
    else
        print("Auto Z Deactivated")
    end
end)

Section:NewToggle("Auto X", "Enable/Disable auto pressing X", function(state)
    autoPressXEnabled = state
    if state then
        print("Auto X Activated")
        task.spawn(autoPressX)
    else
        print("Auto X Deactivated")
    end
end)

Section:NewToggle("Auto C", "Enable/Disable auto pressing C", function(state)
    autoPressCEnabled = state
    if state then
        print("Auto C Activated")
        task.spawn(autoPressC)
    else
        print("Auto C Deactivated")
    end
end)

Section:NewToggle("Auto V", "Enable/Disable auto pressing V", function(state)
    autoPressVEnabled = state
    if state then
        print("Auto V Activated")
        task.spawn(autoPressV)
    else
        print("Auto V Deactivated")
    end
end)

Section:NewToggle("Auto B", "Enable/Disable auto pressing B", function(state)
    autoPressBEnabled = state
    if state then
        print("Auto B Activated")
        task.spawn(autoPressB)
    else
        print("Auto B Deactivated")
    end
end)

local Tab = Window:NewTab("Misc")
local Section = Tab:NewSection("Character")

Section:NewSlider("WalkSpeed", "", 500, 0, function(s) -- 500 (MaxValue) | 0 (MinValue)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = s
end)

Section:NewSlider("JumpPower", "", 500, 0, function(j) -- 500 (MaxValue) | 0 (MinValue)
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = j
end)

local Tab = Window:NewTab("Setting")
local Section = Tab:NewSection("Setting")
Section:NewKeybind("on/off", "KeybindInfo", Enum.KeyCode.RightControl, function()
  Library:ToggleUI()
end)
